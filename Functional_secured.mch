
/*
 * This file was generated by B4MSecure on Wednesday, November 22, 2023 at 3:14:53 PM CET
 * -
 * B4MSecure Eclipse IDE Integration (part of B4MSecure) version 2.0.5.202104011214
 * Please visit http://b4msecure.forge.imag.fr for further information
 */


MACHINE
	Functional_secured

INCLUDES
	Functional,
	Policy	

SEES
	ContextMachine

PROMOTES
	safeConnect, disconnect, setCurrentUser, setPermissions




	
DEFINITIONS   
    
	"Functional.def";

	currentRoles 	== (Session[{currentUser}] \/ ran(Session[{currentUser}]<|closure1(Roles_Hierarchy)));
	not_permitted	== (0 = 1)

	

    
OPERATIONS

	secure_MedicalRecord_validate(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord &
		/* 
		 * pre-condition [Defined in Operation HospitalSystem::Functional::MedicalRecord::validate]
		 */
		MedicalRecord_valid(aMedicalRecord) = FALSE
		
	THEN
		SELECT
			MedicalRecord_validate_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_validate(aMedicalRecord)
	   	END
	END;

	secure_Patient_NEW(aPatient) = 
	PRE	aPatient : PATIENT &
		aPatient /: Patient
		
	THEN
		SELECT
			Patient_NEW_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_NEW(aPatient)
	   	END
	END;

	secure_MedicalRecord_NEW(aMedicalRecord) = 
	PRE	aMedicalRecord : MEDICALRECORD &
		aMedicalRecord /: MedicalRecord
		
	THEN
		SELECT
			MedicalRecord_NEW_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_NEW(aMedicalRecord)
	   	END
	END;

	secure_Patient_Free(aPatient) = 
	PRE	aPatient : Patient
		
	THEN
		SELECT
			Patient_Free_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_Free(aPatient)
	   	END
	END;

	secure_MedicalRecord_Free(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord
		
	THEN
		SELECT
			MedicalRecord_Free_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_Free(aMedicalRecord)
	   	END
	END;

	result <-- secure_MedicalRecord_GetPatient(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord &
		aMedicalRecord : dom(mRecords)
		
	THEN
		SELECT
			MedicalRecord_GetPatient_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			result <-- MedicalRecord_GetPatient(aMedicalRecord)
	   	END
	END;

	result <-- secure_Patient_GetMedicalrecord(aPatient) = 
	PRE	aPatient : Patient &
		aPatient : ran(mRecords)
		
	THEN
		SELECT
			Patient_GetMedicalrecord_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			result <-- Patient_GetMedicalrecord(aPatient)
	   	END
	END;

	secure_MedicalRecord_SetPatient(aMedicalRecord,aPatient) = 
	PRE	aMedicalRecord : MedicalRecord &
		aPatient : Patient &
		{(aMedicalRecord |-> aPatient)} /<: mRecords
		
	THEN
		SELECT
			MedicalRecord_SetPatient_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_SetPatient(aMedicalRecord,aPatient)
	   	END
	END;

	secure_Patient_SetMedicalrecord(aPatient,theMedicalrecord) = 
	PRE	aPatient : Patient &
		theMedicalrecord : FIN(MedicalRecord) &
		(theMedicalrecord * {aPatient}) /<: mRecords &
		!added.( added : theMedicalrecord => MedicalRecord_patient[{added}] = {})
		
	THEN
		SELECT
			Patient_SetMedicalrecord_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_SetMedicalrecord(aPatient,theMedicalrecord)
	   	END
	END;

	secure_MedicalRecord_UnsetPatient(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord
		
	THEN
		SELECT
			MedicalRecord_UnsetPatient_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_UnsetPatient(aMedicalRecord)
	   	END
	END;

	secure_Patient_UnsetMedicalrecord(aPatient) = 
	PRE	aPatient : Patient
		
	THEN
		SELECT
			Patient_UnsetMedicalrecord_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_UnsetMedicalrecord(aPatient)
	   	END
	END;

	secure_Patient_AddMedicalrecord(aPatient,aMedicalrecord) = 
	PRE	aPatient : Patient &
		aMedicalrecord : MedicalRecord &
		(aMedicalrecord |-> aPatient) /: mRecords &
		MedicalRecord_patient[{aMedicalrecord}] = {}
		
	THEN
		SELECT
			Patient_AddMedicalrecord_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_AddMedicalrecord(aPatient,aMedicalrecord)
	   	END
	END;

	secure_MedicalRecord_RemovePatient(aMedicalRecord,aPatient) = 
	PRE	aMedicalRecord : MedicalRecord &
		aPatient : Patient &
		(aMedicalRecord |-> aPatient) : mRecords
		
	THEN
		SELECT
			MedicalRecord_RemovePatient_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_RemovePatient(aMedicalRecord,aPatient)
	   	END
	END;

	secure_Patient_RemoveMedicalrecord(aPatient,aMedicalrecord) = 
	PRE	aPatient : Patient &
		aMedicalrecord : MedicalRecord &
		(aMedicalrecord |-> aPatient) : mRecords
		
	THEN
		SELECT
			Patient_RemoveMedicalrecord_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			Patient_RemoveMedicalrecord(aPatient,aMedicalrecord)
	   	END
	END;

	result <-- secure_MedicalRecord_GetData(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord &
		aMedicalRecord : dom(MedicalRecord_data)
		
	THEN
		SELECT
			MedicalRecord_GetData_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			result <-- MedicalRecord_GetData(aMedicalRecord)
	   	END
	END;

	result <-- secure_MedicalRecord_GetValid(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord &
		aMedicalRecord : dom(MedicalRecord_valid)
		
	THEN
		SELECT
			MedicalRecord_GetValid_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			result <-- MedicalRecord_GetValid(aMedicalRecord)
	   	END
	END;

	secure_MedicalRecord_SetData(aMedicalRecord,aData) = 
	PRE	aMedicalRecord : MedicalRecord &
		aData : STRING
		
	THEN
		SELECT
			MedicalRecord_SetData_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_SetData(aMedicalRecord,aData)
	   	END
	END;

	secure_MedicalRecord_SetValid(aMedicalRecord,aValid) = 
	PRE	aMedicalRecord : MedicalRecord &
		aValid : BOOL
		
	THEN
		SELECT
			MedicalRecord_SetValid_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_SetValid(aMedicalRecord,aValid)
	   	END
	END;

	secure_MedicalRecord_UnsetData(aMedicalRecord) = 
	PRE	aMedicalRecord : MedicalRecord
		
	THEN
		SELECT
			MedicalRecord_UnsetData_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_UnsetData(aMedicalRecord)
	   	END
	END;

	secure_MedicalRecord_RemoveData(aMedicalRecord,aData) = 
	PRE	aMedicalRecord : MedicalRecord &
		aData : STRING &
		{(aMedicalRecord |-> aData)} <: MedicalRecord_data
		
	THEN
		SELECT
			MedicalRecord_RemoveData_ : isPermitted[currentRoles]
			
			
			
	   	THEN
			MedicalRecord_RemoveData(aMedicalRecord,aData)
	   	END
	END	
	

  	
END

